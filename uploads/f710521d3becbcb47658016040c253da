"use strict"
function checkCashRegister(price, cash, cid) {
  let change = cash - price;
  const receipt = {
    status: "",
    change: []
  }
  const denom = [
    { name: "ONE HUNDRED", val: 100.0 },
    { name: "TWENTY", val: 20.0 },
    { name: "TEN", val: 10.0 },
    { name: "FIVE", val: 5.0 },
    { name: "ONE", val: 1.0 },
    { name: "QUARTER", val: 0.25 },
    { name: "DIME", val: 0.1 },
    { name: "NICKEL", val: 0.05 },
    { name: "PENNY", val: 0.01 }
  ];

  let register = cid.reduce((acc, current) => {
    acc.total += current[1]
    acc[current[0]] = current[1]
    return acc
    }, {total: 0}
  )

  // Handle exact change
  if (register.total === change) {
    receipt.status = "CLOSED";
    receipt.change = cid;
    return receipt;
  }

  // Handle obvious insufficient funds
  if (register.total < change) {
    receipt.status = "INSUFFICIENT_FUNDS";
    return receipt;
  }

  var change_arr = denom.reduce(function(acc, curr) {
    var value = 0;
    // While there is still money of this type in the drawer
    // And while the denomination is larger than the change remaining
    while (register[curr.name] > 0 && change >= curr.val) {
      change -= curr.val;
      register[curr.name] -= curr.val;
      value += curr.val;

      // Round change to the nearest hundreth deals with precision errors
      change = Math.round(change * 100) / 100;
    }
    // Add this denomination to the output only if any was used.
    if (value > 0) {
      acc.push([curr.name, value]);
    }
    return acc; // Return the current change_arr
  }, []);

  if (change_arr.length < 1 || change > 0) {
    receipt.status = "INSUFFICIENT_FUNDS";
    return receipt;
  }

  // Here is your change, ma'am.
  receipt.status = "OPEN";
  receipt.change = change_arr;

  console.log(receipt)
  return receipt;
}

checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 1], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]);